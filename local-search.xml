<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2021/09/25/SpringMVC/"/>
    <url>/2021/09/25/SpringMVC/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p class="note note-info">M：Model（模型）封装和映射的数据（JavaBean）<br>V：View（视图）页面显示工作（Jsp）<br>C：Controller（控制器）控制整个网站跳转逻辑（Servlet）</p><p><img src="/img/blogimgs/Spring/MVC/1.png"></p><p><b>多了个前端控制器</b></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring之AOP</title>
    <link href="/2021/09/22/Spring%E4%B9%8BAOP/"/>
    <url>/2021/09/22/Spring%E4%B9%8BAOP/</url>
    
    <content type="html"><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><blockquote><p>百度：</p><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/6016335">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/%E9%A2%84%E7%BC%96%E8%AF%91/3191547">预编译</a>方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p></blockquote><p>将某段代码(<b>日志</b>)动态的切入(<b>不把日志代码写死在业务逻辑方法中</b>)到指定方法(<b>加减乘除</b>)的指定位置(<b>方法的开始，结束，异常</b>)进行运行的这种编程方式（<b>Spring简化了面向切面编程</b>）</p><h3 id="几个专业术语"><a href="#几个专业术语" class="headerlink" title="几个专业术语"></a>几个专业术语</h3><p><img src="/img/blogimgs/Spring/AOP/1.png"></p><h3 id="基于注解的AOP使用步骤"><a href="#基于注解的AOP使用步骤" class="headerlink" title="基于注解的AOP使用步骤"></a>基于注解的AOP使用步骤</h3><p class="note note-info">1.导包<br>    2.写配置<br>    &nbsp&nbsp&nbsp&nbsp&nbsp1).将目标类和切面类(封装了通知方法(在目标方法前后执行的方法))加入到IOC容器中<br>    &nbsp&nbsp&nbsp&nbsp&nbsp2).告诉Spring到底是哪个切面类@Aspect。@Order指定多个切面执行顺序，数字越小优先级越高<br>    &nbsp&nbsp&nbsp&nbsp&nbsp3).告诉Spring切面类里面的每一个方法，都是何时何地运行。5个通知注解<br>    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp@Before:目标方法之前运行&nbsp&nbsp&nbsp&nbsp&nbsp前置通知<br>    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp@After:目标方法结束后运行&nbsp&nbsp&nbsp&nbsp&nbsp后置通知<br>    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp@AfterReturning:目标方法正常返回后&nbsp&nbsp&nbsp&nbsp&nbsp返回通知<br>    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp@AfterThrowing:目标方法抛出异常后运行&nbsp&nbsp&nbsp&nbsp&nbsp异常通知<br>    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp@Around:环绕(动态代理)&nbsp&nbsp&nbsp&nbsp&nbsp环绕通知(Spring最强大的通知)，参数ProceedingJoinPoint<br>    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp切入点表达式：用法:注解里写execution(public+返回类型+方法全类名+方法参数)。<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp抽取可重用的切入点表达式<br>    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp1).随便声明一个没有实现的返回void的空方法<br>    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp2).给方法上标注@Pointcut注解<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp通配符：*：1.匹配一个或多个字符<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp2.匹配任意一个参数<br>    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp3.只能匹配一层路径<br>     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp4.权限位置*不能<br>    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp..：1.匹配任意多个参数和任意类型参数<br>     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp2.匹配多层路径，在全类名中加<br>    &nbsp&nbsp&nbsp&nbsp&nbsp4).开启基于注解的AOP模式，在配置文件中写入<code>aop:aspectj-autoproxy</code><br>    3.测试<br>    &nbsp&nbsp&nbsp&nbsp&nbsp1).从IOC容器中拿到目标对象；注意：如果想要用类型，一定要用他的接口类型，不要用本类</p><h3 id="基于配置的AOP使用"><a href="#基于配置的AOP使用" class="headerlink" title="基于配置的AOP使用"></a>基于配置的AOP使用</h3><p><img src="/img/blogimgs/Spring/AOP/2.png"></p><p><img src="/img/blogimgs/Spring/AOP/2.png"></p><blockquote><p>注解：快速方便</p><p>配置：功能完善；重要的用配置，不重要的用注解</p></blockquote><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p>事务管理代码的<b>固定模式</b>作为一种<b>横切关注点</b>,可以通过AOP方法模块化，进而借助<b>Spring AOP框架</b>实现声明式事务管理</p><p class="note note-info">事务切面====事务管理器</p><p>注解：@Transactional</p><p><img src="/img/blogimgs/Spring/AOP/4.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB(Windows下)</title>
    <link href="/2021/09/15/MongoDB(%E5%9F%BA%E4%BA%8EWindows)/"/>
    <url>/2021/09/15/MongoDB(%E5%9F%BA%E4%BA%8EWindows)/</url>
    
    <content type="html"><![CDATA[<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><blockquote><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。在高负载的情况下，添加更多的节点，可以保证服务器性能。MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p></blockquote><h2 id="下载安装-Windows下"><a href="#下载安装-Windows下" class="headerlink" title="下载安装(Windows下)"></a>下载安装(Windows下)</h2><p><a href="https://www.mongodb.com/try/download/community">MongoDB官网下载(社区版)</a>，建议选稳定版。</p><p><img src="/img/blogimgs/MongoDB/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NoSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring之IOC</title>
    <link href="/2021/09/14/Spring%E4%B9%8BIOC/"/>
    <url>/2021/09/14/Spring%E4%B9%8BIOC/</url>
    
    <content type="html"><![CDATA[<h2 id="IDEA导入Spring依赖"><a href="#IDEA导入Spring依赖" class="headerlink" title="IDEA导入Spring依赖"></a>IDEA导入Spring依赖</h2><blockquote><p>根据之前的学的<a href="/2021/09/10/Maven/">Maven</a>来构建</p></blockquote><p>进入<a href="https://mvnrepository.com/">maven仓库</a>(需要翻墙),输入<code>Spring Context</code>找到对应仓库(使用最多的那个)，进去后选择对应版本号(可根据使用量来选)的<code>RELEASE</code>版，点进去后复制对应的依赖,</p><ol><li><p>创建项目</p><p><img src="/img/blogimgs/Spring/2.png"></p></li><li><p>填好对应pom坐标,有个<img src="/img/blogimgs/Spring/3.png">的图标在<code>pom.xml</code>文件配置上，点一下就可以实现自动下载了</p><p><img src="/img/blogimgs/Spring/1.png"></p><p><img src="/img/blogimgs/Spring/4.png"></p></li><li><p>此时可以看到下载下来的依赖包和<code>Spring5</code>模块的对比，其中有四个核心<code>jar</code>包：<code>Beans,  Core,  Context,  Expression</code></p><p><img src="/img/blogimgs/Spring/5.png"></p><p><img src="/img/blogimgs/Spring/6.png"></p></li></ol><h2 id="IOC-Beans-Core"><a href="#IOC-Beans-Core" class="headerlink" title="IOC(Beans,Core)"></a>IOC(Beans,Core)</h2><blockquote><p>百度：</p><p>IOC:    (Inversion  Of   Control) 控制反转,是<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/254878">面向对象编程</a>中的一种设计原则，可以用来减低计算机<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81/86048">代码</a>之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938">耦合度</a>。其中最常见的方式叫做<a href="https://baike.baidu.com/item/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/5177233">依赖注入</a>（Dependency Injection，简称<strong>DI</strong>），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。 </p></blockquote><p><img src="/img/blogimgs/Spring/9.png"></p><ol><li><p>（IOC）容器：主动的new资源变成被动的接受资源，类似于婚介所</p></li><li><p>（DI）依赖注入：容器能知道哪个组件（类）运行的时候，需要另一个类（组件）。</p></li><li><p>框架编写流程：</p><p class="note note-info">1. 导包</br>2. 写配置</br>3. 测试</br></p></li></ol><p>入门案例：</p><p>在resources文件夹下创建<code>Spring</code>配置文件</p><p><img src="/img/blogimgs/Spring/7.png"></p><p>配置<code>User</code>对象的创建，文件中写入<code>bean</code>的配置信息,其中<code>id</code>为别名，<code>class</code>为类所在位置。</p><p><img src="/img/blogimgs/Spring/8.png"></p><p>测试(项目中应该不会这样用)</p><p class="note note-warning">注意，这里要把xml配置文件放在/main/java/resources下，需要创建resources文件夹，并把它设置为Resources Root</p><p class="note note-info">1.ApplicationContext（IOC容器的接口）</br>     2.根据id拿对象(且id唯一)，并且容器中对象的创建是在容器创建完成之前就创建成了</br>     3.同一个组件在IOC容器中是单实例的，容器启动完成就已经创建好了。</br>     4.ioc容器在创建这个组件对象的时候，(property)会利用setter方法为javaBean的属性进行赋值     5.javaBean的属性名是由什么决定的？getter/setter方法是属性名；set去掉后面那一串在小写就是属性名；所有getter/setter都自动生成！</p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">login</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;登陆成功！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUser</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">login</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//1.加载Spring配置文件,获取容器</span><br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取配置创建的对象</span><br>        User user = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class); <span class="hljs-comment">//其中&quot;user&quot;是配置文件中的id值。</span><br>        System.out.println(user);<br>        user.login();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Bean配置文件赋值方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--   1.利用构造器进行赋值(掌握)   可通过index设置参数指定索引，并设值  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.study.User&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- public User(String name, String address, String gender, int age)  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;158@.com&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--  2.属性赋值  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.study.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;158@.com&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--  3.使用p名称空间赋值 (适合简单的赋值),util名称空间(写在外部，例如map,list;在bean里面的property指定ref属性，值为id) </span><br><span class="hljs-comment">xml配置文件中要导入  xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.study.User&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;张三&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;18&quot;</span> <span class="hljs-attr">p:address</span>=<span class="hljs-string">&quot;158@.com&quot;</span> <span class="hljs-attr">p:gender</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">util:map</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myMap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;key01&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">util:map</span>&gt;</span><br><br><br><br><span class="hljs-comment">&lt;!-- 4.最好不要在属性里面指定value值，避免特殊值，使用指定属性的标签进行赋值</span><br><span class="hljs-comment">property中的ref属性表示引用配置文件创建的bean。实际上是同一个对象，是一个严格的引用，</span><br><span class="hljs-comment"> 但如果重设对象属性值，是会改变引用的属性值。</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user4&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.study.User&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--    复杂赋值    --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">null</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;car01&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.study.Car&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;carName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;宝马&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;price&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;300000&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;color&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user5&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.study.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">null</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 引用外面一个值  相当于 car = ioc.getBean(&quot;car01&quot;) --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;property name=&quot;name&quot; ref=&quot;car01&quot;&gt;</span><br><span class="hljs-comment">        &lt;/property&gt;--&gt;</span><br>     <br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;car&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;car01&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.study.Car&quot;</span>&gt;</span><br>               <span class="hljs-comment">&lt;!--在内部定义  相当于 Car car = new Car() 不能被获取到，只能内部使用--&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;carName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;自行车&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;color&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;price&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>     <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br><br><span class="hljs-comment">&lt;!--级联属性赋值     级联的属性:属性的属性</span><br><span class="hljs-comment">级联属性可以修改属性的属性，注意，原来的bean的值可能会被修改</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.study.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;car&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;car01&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;car.price&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;50000&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p class="note note-info"><b>bean属性信息(bean的创建默认是框架利用反射new出来的bean实例)</b><br>1.id:类似于标识符(唯一)    <br>2.class:bean对象所在的哪个包下的哪个类  <br>3.parent:指定当前bean的配置信息继承哪个，修改需要的值。注意:是配置信息，不是子父类关系<br>4.abstract:指定这个bean配置是否是一个抽象的，不能获取实例，只能被别人用来继承<br>5.depends-on:指定bean的创建顺序<br>6.scope(作用域)(重点):<br>   &nbsp&nbsp 1).prototype:多实例的，容器启动默认不会创建多实例Bean;获取的时候创建这个Bean;每次获取都会创建一个新对象<br>   &nbsp&nbsp 2).singleton:单实例的(默认)，容器启动前就已经创建好了，保存在容器中<br>   &nbsp&nbsp 3).request:在web环境下，同一次请求创建一个Bean实例(没用)<br>   &nbsp&nbsp 4).session:在web环境下，同一次会话创建一个Bean实例(没用)<br></p><h3 id="工厂模式（-）"><a href="#工厂模式（-）" class="headerlink" title="工厂模式（*）"></a>工厂模式（*）</h3><blockquote><p>工厂帮我们创建对象，有一个专门帮我们创建对象的类，这个类就是工厂</p></blockquote><ol><li><h4 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h4><p>工厂本身不用创建对象；通过静态方法调用，对象 = 工厂类.工厂方法名()</p><blockquote><p>factory-method：指定哪个方法是工厂方法</p><p>class：指定静态工厂全类名</p><p>constructor-arg：为方法传参</p></blockquote></li><li><h4 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h4><p>工厂本身需要创建对象；工厂类  工厂对象  = new  工厂类(),；工厂对象.工厂方法名()</p><blockquote><p>1.先配置出实例工厂对象</p><p>2.配置我们要创建的对象使用哪个工厂创建</p><ul><li>factory-bean：指定使用哪个工厂实例</li><li>factory-method：使用哪个工厂方法</li></ul></blockquote></li><li><h4 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h4><p>是Spring规定的一个接口，实现了该接口的实现类，Spring都认为是一个工厂</p></li></ol><blockquote><ol><li>ioc容器启动的时候不会创建实例</li><li>FactoryBean获取的时候才创建对象,区别于前两种工厂</li></ol></blockquote><h3 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期"></a>Bean生命周期</h3><ol><li>单例：（容器启动）构造器—-&gt;初始化方法—-&gt;（容器关闭）销毁方法</li><li>多实例：获取bean（构造器—-&gt;初始化方法）—-&gt;容器关闭不会调用bean的销毁方法</li></ol><h3 id="Bean的后置处理器"><a href="#Bean的后置处理器" class="headerlink" title="Bean的后置处理器"></a>Bean的后置处理器</h3><ol><li><p>(容器启动)构造器——后置处理器before..——初始化方法——后置处理器afer——bean初始化完成</p><p><b>无论bean是否有初始化方法，后置处理器都会默认有，还会继续工作</b></p></li></ol><h3 id="引用外部文件"><a href="#引用外部文件" class="headerlink" title="引用外部文件"></a>引用外部文件</h3><p>Spring管理数据库连接池(alibaba的德鲁伊连接池)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource01&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=CTT&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.cj.jdbc.Driver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="基于Xml的自动装配"><a href="#基于Xml的自动装配" class="headerlink" title="基于Xml的自动装配"></a>基于Xml的自动装配</h3><p>利用bean中的属性autowire来设置（<b>仅限于对自定义类型的属性有效</b>）</p><blockquote><p>autowire=“defalut/no”：默认不自动装配</p><p>autowire=“byName”：按照名字（以属性名作为id去容器中找到这个组件，给他赋值，反之则为null）</p><p>autowire=“byType”：按照种类（以属性类型作为查找依据去容器中这个组件，如果容器中有多个这种类型的组件，会报错，没找到装配null），如果类型是list，可以把容器中的所有对象都封装list赋值。</p><p>autowire=“constructor”：按照构造器进行赋值</p><p>​                                        1.先按照有参构造器的参数类型进行装配(成功就赋值)，没有就直接为组件装配null即可</p><p>​                                        2.如果按照类型找到多个，则参数的名作为id继续匹配；找到就装配，找不到就装配null</p><p>​                                        3.不会报错</p></blockquote><h2 id="SPEL"><a href="#SPEL" class="headerlink" title="SPEL"></a>SPEL</h2><p>用法：1.指定value=“#{ bean/bean.属性/数学表达式}”</p><p>​           2.使用静态方法value=“#{T(全类名).静态方法名(参数)}”</p><p>​          3.使用非静态方法value=“#{对象ID.方法名}”</p><h2 id="使用注解方式将组件加入到IOC中"><a href="#使用注解方式将组件加入到IOC中" class="headerlink" title="使用注解方式将组件加入到IOC中"></a>使用注解方式将组件加入到IOC中</h2><p>通过给bean上添加某些注解，可以快速将bean加入到ioc容器中</p><p>某个类上添加某些注解都能快速的将这个组件加入到ioc容器的管理中</p><p class="note note-info">Spring中有四个注解：<br>1. @controller:控制器，一般是servlet包下的组件加这个注解<br>2. @Service：业务逻辑层<br>3. @Repository：数据库层<br>4. @Component：除以上三个，一般是Utils工具类</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>各组件标上注解</p></li><li><p>告诉Spring，自动扫描加了注解的组件，依赖于Context名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--扫描base-package下加了注解的类，扫描进IOC容器中--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.study&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>导入aop包，aop支持注解模式</p></li></ol><p class="note note-info">1.加了注解的组件默认id是类名首字母小写<br>    @Repository("bookDao01")<br>    public class BookDao{<br>    }<br>    2.组件的作用域默认是单例<br>    @Scope("value=prototype")</p><h3 id="DI（依赖注入）"><a href="#DI（依赖注入）" class="headerlink" title="DI（依赖注入）"></a>DI（依赖注入）</h3><h4 id="测试样例（注解自动装配）"><a href="#测试样例（注解自动装配）" class="headerlink" title="测试样例（注解自动装配）"></a>测试样例（注解自动装配）</h4><p class="note note-info">@Autowired：Spring会自动的为这个属性赋值；一定是去容器中找到这个属性对应的组件，类上的注解是必不可少的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Servlet层</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServlet</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Get方法&quot;</span>);<br>        bookService.save();<br><br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-comment">//Service层</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Service层调用bookDao保存图书......&quot;</span>);<br>        bookDao.saveBook();<br>    &#125;<br><br>&#125;<br><br><br><br><br><span class="hljs-comment">//Dao层</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookDao</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveBook</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;图书保存了......&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><br><br><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBook</span> </span>&#123;<br><br>    ApplicationContext ioc = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationXmlConfig.xml&quot;</span>);<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        BookServlet bookServlet = (BookServlet)ioc.getBean(<span class="hljs-string">&quot;bookServlet&quot;</span>);<br><br>        bookServlet.doGet();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/blogimgs/Spring/10.png"></p><blockquote><p>可以看出Spring注解模式的强大！！！</p></blockquote><h3 id="Autowired自动装配原理"><a href="#Autowired自动装配原理" class="headerlink" title="@Autowired自动装配原理"></a>@Autowired自动装配原理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.先按照类型去容器中找到对应的组件：<br>    1).找到一个，找到就赋值<br>    2).没找到：抛异常<br>    3).找到多个（继承）？装配上？<br>    ①会按照变量名作为id进行查找装配<br>    1.匹配上，装配<br>    2.没匹配上，报错（变量名作为id进行查找装配）<br>(@Qualifier(<span class="hljs-string">&quot;&quot;</span>)：指定一个名作为id，让Spring别使用变量名进行查找)<br>                    1.匹配上，装配<br>       2.没匹配上，报错<br>    发现Autowired标注的自动装配的属性默认是一定装配上的，可以设置属性require来不一定装配上   <br></code></pre></td></tr></table></figure><p class="note note-info">    <b>@Autowired和@Resource区别</b><br>    @Autowired：最强大，Spring自己的注解<br>    @Resource：j2ee，java的标准<br>    @Resource：扩展性更强;如果使用另一个容器框架，@Resource还是可以使用的，@Autowired就不行了</p><h2 id="IOC总结"><a href="#IOC总结" class="headerlink" title="IOC总结"></a>IOC总结</h2><p><img src="/img/blogimgs/Spring/11.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客声明</title>
    <link href="/2021/09/10/%E5%8D%9A%E5%AE%A2%E5%A3%B0%E6%98%8E/"/>
    <url>/2021/09/10/%E5%8D%9A%E5%AE%A2%E5%A3%B0%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p class="note note-warning">本博客网站仅供学习使用,部分内容可能来自网络，如需转载使用请注明来源！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Maven</title>
    <link href="/2021/09/10/Maven/"/>
    <url>/2021/09/10/Maven/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h1><blockquote><p>一个项目管理工具，它包含了一个对象模型。一组标准集合，一个依赖管理系统。和用来运行定义在生命周期阶段中插件目标和逻辑。</p></blockquote><h2 id="没有用Maven管理开发项目时的问题"><a href="#没有用Maven管理开发项目时的问题" class="headerlink" title="没有用Maven管理开发项目时的问题"></a>没有用Maven管理开发项目时的问题</h2><ol><li>项目有很多模块，手工管理关系时，比较繁琐</li><li>需要第三方功能，也就是要手动下载网络上的jar文件</li><li>在2的基础上，又要管理每个jar文件的版本</li><li>管理jar文件的依赖，一个jar文件需要另一个jar文件中的类，就必须获取另一个jar文件</li></ol><h2 id="Maven干什么的"><a href="#Maven干什么的" class="headerlink" title="Maven干什么的"></a>Maven干什么的</h2><ol><li>maven可以管理jar文件</li><li>自动下载jar和其他文档，源代码</li><li>管理jar之间的依赖，a.jar需要b.jar，maven会自动下载b.jar</li><li>管理需要的jar版本</li><li>帮你编译程序，将.java编译成.class</li><li>测试代码是否正确</li><li>打包文件，形成jar文件或.war文件、</li><li>帮你部署项目</li></ol><h2 id="构建（面向过程）"><a href="#构建（面向过程）" class="headerlink" title="构建（面向过程）"></a>构建（面向过程）</h2><p>Maven支持的构建有：</p><ol><li>清理：删除之前项目编译的东西，为新的编译代码做准备</li><li>编译：将源代码编译成可以执行代码，和javac不同，maven可以同时编译多个，javac只能编译一个</li><li>测试：maven可以执行测试程序代码，验证功能是否正确</li><li>报告：生成测试结果的文件，测试通过没有</li><li>打包：将项目中的所有class文件，配置文件等所有资源打包在一个压缩文件中。java对应<code>jar</code>，web对应<code>war</code></li><li>安装：将5中的生成的jar文件，war文件安装到本机仓库</li><li>部署：把程序安装好可以执行（复杂）</li></ol><h2 id="Maven核心概念"><a href="#Maven核心概念" class="headerlink" title="Maven核心概念"></a>Maven核心概念</h2><ol><li>pom：Project Object Model，项目对象模型，一个叫做pom.xml的文件，项目为模型。控制maven构建项目的过程，管理jar依赖</li><li>约定的目录结构：maven项目的目录和文件的位置都是规定的</li><li>坐标：是一个唯一字符串，用来表示资源</li><li>依赖管理：管理你的项目可以使用jar文件</li><li>仓库管理：资源存放位置</li><li>生命周期：maven构建项目的过程，就是生命周期</li><li>插件和目标：执行maven构建的工具是插件</li><li>继承（parent）：在maven中，如果多个模块都需要声明相同的配置，例如：version，有相同的依赖，或者相同的组件配置等，类似于Java的继承机制，用parent声明要继承父工程的pom属性</li><li>聚合（modules）：在Maven的多模块开发中，为了统一构建整个项目的所有模块，可以提供一个额外的模块，该模块的打包方式为pom，并且在其中使用modules聚合其他模块，这样通过本模块就可以一键自动识别</li></ol><h2 id="Maven下载以及安装"><a href="#Maven下载以及安装" class="headerlink" title="Maven下载以及安装"></a>Maven下载以及安装</h2><ol><li><p><a href="https://maven.apache.org/download.cgi">官网下载</a>，下载完后解压，非中文目录</p><p><img src="/img/blogimgs/Maven/downloadMaven.png"></p><p><img src="/img/blogimgs/Maven/az.png"></p></li><li><p>解压后的子目录  <code>bin</code>：执行程序，主要是mvn.cmd</p><p>​              子目录 <code>conf</code>：maven工具本身的配置文件 setting.xml</p><p><img src="/img/blogimgs/Maven/secdir.png"></p></li><li><p>配置环境变量： </p><p><img src="/img/blogimgs/Maven/1.png"></p><p><img src="/img/blogimgs/Maven/2.png"></p><p>或者可以直接在path中将Maven中的bin目录路径配置到系统变量中，不用单独写一个变量。</p></li><li><p>验证：执行<code>cmd</code>命令行 <code>mvn -v</code></p><p><img src="/img/blogimgs/Maven/3.png"></p><p>此时可以看到Maven的版本，说明配置成功。</p></li></ol><h2 id="Maven约定的目录结构"><a href="#Maven约定的目录结构" class="headerlink" title="Maven约定的目录结构"></a>Maven约定的目录结构</h2><p><img src="/img/blogimgs/Maven/4.png"></p><h2 id="Maven仓库概念"><a href="#Maven仓库概念" class="headerlink" title="Maven仓库概念"></a>Maven仓库概念</h2><p><img src="/img/blogimgs/Maven/5.png"></p><h2 id="Maven中Pom的主要信息"><a href="#Maven中Pom的主要信息" class="headerlink" title="Maven中Pom的主要信息"></a>Maven中Pom的主要信息</h2><p><img src="/img/blogimgs/Maven/6.png"></p><ol><li><p>pom坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>公司域名倒写+项目名<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>自定义项目名称<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>自定义版本号<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>packaging</p><p>项目打包类型，默认<code>jar</code></p></li><li><p>依赖</p><p><code>dependencies</code>和<code>dependency</code></p><p><img src="/img/blogimgs/Maven/7.png"></p></li><li><p>properties :    设置属性</p></li><li><p>build：maven构建项目时的配置信息</p></li></ol><h2 id="IDEA配置Maven"><a href="#IDEA配置Maven" class="headerlink" title="IDEA配置Maven"></a>IDEA配置Maven</h2><ol><li><p>2020版：①配置当前工程的设置<code>File</code>—&gt;<code>Settings</code>—&gt;<code>Build,Execution,Deployment</code>—&gt;<code>Build Tools</code>—&gt;<code>Maven</code></p><p>​    <img src="/img/blogimgs/Maven/8.png"></p><p>—&gt;<code>Runner</code>—&gt;设置<code>VM options: -DarchetypeCatalog=internal</code></p><p> <code>JRE</code>:选择项目的JDK</p><p class="note note-info">VM options 设置为"<code>-DarchetypeCatalog=internal</code>",MavenMaven创建项目时，会联网下载模板文件，文件较大，使用该参数不用下载，创建项目速度快。</p><p>②配置以后新建工程的设置<code>File</code>—&gt;<code>New Projcts Settings</code>。和①操作一样。</p></li></ol><h3 id="JaveSE项目"><a href="#JaveSE项目" class="headerlink" title="JaveSE项目"></a>JaveSE项目</h3><p class="note note-info">模板：maven-archetype-quickstart</p><ol><li><p><img src="/img/blogimgs/Maven/9.png"></p></li><li><p><img src="/img/blogimgs/Maven/10.png"></p></li><li><p><img src="/img/blogimgs/Maven/11.png"></p></li><li><p>完成<img src="/img/blogimgs/Maven/12.png"></p></li><li><p>此时可以看到对应的文件结构以及右侧的工具窗口(双击即可使用)</p><p><img src="/img/blogimgs/Maven/13.png"></p><p><img src="/img/blogimgs/Maven/15.png"></p></li><li><p>还可以直接在2中的选择<code>Artifact Coordinates</code></p><p><img src="/img/blogimgs/Maven/14.png"></p><p><code>pom.xml</code>中的属性</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 项目坐标 --&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.study<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ch01-javase-maven<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 项目生成网页时的 项目名字 和 地址 （可以不用）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ch01-javase-maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 项目构建时用的utf-8 避免中文乱码--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 编译java代码使用的jdk版本 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 你的java项目应该运行在什么样的jdk上 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 项目依赖  在此处进行添加依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--插件(默认的，删不删都有，只是列出来更好配置)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><span class="hljs-comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-install-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-site-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Web工程"><a href="#Web工程" class="headerlink" title="Web工程"></a>Web工程</h3><p class="note note-info">模板：maven-archetype-webapp</p><p>构建和JavaSE项目差不多</p><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p><code>scope</code>:表示依赖作用范围，有<code>compile（默认）</code>,<code>test</code>,<code>provided（打包，部署不需要）</code>，也就是说在构建项目时在哪个阶段有效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/blogimgs/Maven/16.png"></p><h2 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h2><h3 id="1-全局变量"><a href="#1-全局变量" class="headerlink" title="1.全局变量"></a>1.全局变量</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在properties里面指定自定义全局变量(类似于EL表达式)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>14<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>14<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-资源插件"><a href="#2-资源插件" class="headerlink" title="2.资源插件"></a>2.资源插件</h3><p><img src="/img/blogimgs/Maven/18.png"></p><p>简单点说，应该就是把在指定目录下的资源（设置了后缀名），在<code>compile</code>时，打包拷贝到<code>target/classes</code>目录下。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Project Build</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑常用快捷键</title>
    <link href="/2021/09/08/%E7%94%B5%E8%84%91%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2021/09/08/%E7%94%B5%E8%84%91%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="电脑的常用快捷键"><a href="#电脑的常用快捷键" class="headerlink" title="电脑的常用快捷键"></a>电脑的常用快捷键</h1><hr><h2 id="键盘功能键"><a href="#键盘功能键" class="headerlink" title="键盘功能键"></a>键盘功能键</h2><p><strong>Tab    Shift    Ctrl    Alt    Space(空格)    Enter    Windows        Capslock(改变大小写)        Numlock(锁定右下角数字)    ↑    ↓    ←    →</strong></p><hr><h2 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h2><p><em><strong>Ctrl + C</strong></em><strong>(复制)</strong></p><p><em><strong>Ctrl + V</strong></em><strong>(粘贴)</strong></p><p><em><strong>Ctrl + A</strong></em><strong>(全选)</strong></p><p><em><strong>Ctrl + Z</strong></em><strong>(撤销)</strong></p><p><em><strong>Ctrl + X</strong></em><strong>(剪切)</strong></p><p><em><strong>Ctrl + S</strong></em><strong>(保存)</strong></p><p><em><strong>ALT + F4</strong></em><strong>(关闭窗口)</strong></p><p><em><strong>Shift + Delete</strong></em><strong>(永久删除)</strong></p><p><em><strong>Windows + R</strong></em><strong>(打开某程序)</strong>        <em><strong>Windows + R +输入cmd</strong></em><strong>(打开命令窗口)</strong></p><p><em><strong>Windows + E</strong></em><strong>(打开“我的电脑”)</strong></p><p><strong>Ctrl + Alt + .</strong>   或    <strong>任务栏鼠标右键任务管理器</strong>   或    <strong>Ctrl + Shift + Esc(打开任务管理器)</strong>         <strong>程序死机解决方法</strong></p><p><strong>Shift + 数字(含特殊字符)       (输入特殊字符)</strong></p><hr><p><em><strong>学习摘自</strong></em></p><blockquote><p>b站【狂神说java】p10:预科06：Windows常用快捷键</p></blockquote><p><a href="https://www.bilibili.com/video/BV12J41137hu?p=10">点击进入【狂神说java】p10:预科06：Windows常用快捷键</a></p>]]></content>
    
    
    <categories>
      
      <category>Base</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Functional</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
